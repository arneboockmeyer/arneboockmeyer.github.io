{"name":"openHPI Video Player","tagline":"","body":"# openHPI Video Player\r\nDer neue openHPI Video Player basiert auf einer Kombination aus Dart und Polymer.\r\n\r\n## Struktur\r\nDer Videoplayer besteht aus 5 Polymer-Elementen, die jeweils ein eigenes Dart-Skript haben.\r\n\r\n### video-player.html\r\nDie video-player.html ist unser Hauptelement. Es kann die Attribute autoplay, setProgress, duration, quality, speed und volume übergeben bekommen. Es bekommt außerdem den Content, der beim Erstellen eines Videoplayers angelegt wird, übergeben. Der Content ist der Teil, welcher beim Erstellen des Videoplayer zwischen den Tags <video-player> und </video-player> steht. Das können beispielsweise video-stream's sein.\r\n\r\nIn diesem Polymerelement wird außerdem die Controlbar (video-controlbar) angelegt.\r\n\r\nDie passende .dart-Datei verwaltet die Attribute des Video-Players. Diese sind auch über ein Interface nach außen verfügbar. Möchte man beispielsweise über eine andere Dart-Datei Einfluss auf den Video-Player nehmen, kann man dies über die Methoden dieser Datei tun.\r\n\r\n### video-stream.html\r\nDie Datei video-stream.html beinhaletet die tatsächlichen Videos. In dieser Datei wird der video-Tag von HTML verwendet. Er bekommt die übergebene Quelle übergeben. Die Quelle kann eine SD-Source und eine HD-Source sein. Dafür stehen die Attribute sd_src und hd_src zur Verfügung. Zwischen diesen Stream kann auch über die Controlbar gewechselt werden.\r\n\r\nBei den Video-Quellen ist es wichtig, dass das Format video/mp4 ist. Andere Formate werden aktuell nicht unterstützt. Außerdem ist es wichtig, dass die Video-Streams keine eigene Controlbar haben, da diese Funktion von einer eigenen Controlbar übernommen wird.\r\n\r\nDem video-stream Tag kann man außerdem auch die URL für das Poster (Attribut: poster) und das Seitenverhältnis (Attribut: ratio, Default: 16:9) übergeben.\r\n\r\nAußerdem bekommt dieses Polymer-Element die Untertitel über das Attribut \"subtitles\" übergeben. Diese bekommt sie in Form eines Links zu einer vtt Datei. Dieser Link wird dann in das Track Element von HTML eingebunden. Das hat den Vorteil, dass beispielsweise Screenreader damit umgehen können.\r\n\r\nDie Dart-Datei dieses Polymer-Elements setzt ausschließlich die übergebene Werte und wird somit von außerhalb gesteuert.\r\n\r\n### video-controlbar.html\r\nDie video-controlbar.html beinhaltet das Polymerelement video-controlbar. Mit dieser Controlbar lassen sich alle Video-Streams steuern. Man kann ihr die Attribute isPlaying, setProgress, progressIndicator, duration, speed, volume und showSubtitles übergeben. Diese stehen für die Werte der entsprechenden Funktionen.\r\n\r\nWichtig für den Video-Player ist, dass die core-icon's von Polymer eingebunden werden. Dies passiert oben in der Datei über den folgenden Code:\r\n> `<link rel=\"import\" href=\"packages/core_elements/av_icons.html\">`\r\n\r\nDiese müssen jedoch auch vorhanden sein.\r\n\r\nAußerdem muss die slider-bar eingebunden werden. Dies ist ein weiteres Polymerelement von uns. Damit wird die Progressbar realisiert.\r\n\r\nIm Dart-Skript werden die Befehle, die der Benutzer der Controlbar geben, an die Videostreams weitergegeben. Die aktuellen Werte (Lautstärke, Geschwindigkeit, ...) werden hier gespeichert und nach außen hin verfügbar gemacht.\r\n\r\n### slider-bar.html\r\nDie Sliderbar wird von der Controlbar als Progressbar verwendet. Sie wurde aufgrund des umfangreichen Skriptes in ein eigenes Polymer-Element ausgelagert.\r\n\r\nDie Sliderbar beindet eine paper-progressbar ein. Dieses Element wird dargesellt und mit den übergebenen Werten (max,  value, opt. secondValue [zB für Buffering Bar], bubbleText) gefüllt.\r\nIst ein bubbleText-Attribut (z.B. bei der ProgressBar) gesetzt, wird bei Ziehen der Bar eine Textblase angezeigt, die beispielsweise die eingestellte Abspielposition anzeigt.\r\n\r\nIm Dart-Skirpt werden die Klicks auf diesen Slider abgefangen. Über ein Datenbinding wird der neue Wert an die Controlbar weitergeben.\r\n\r\n### video-thumbnails.html\r\nÜber die Video-Thumbnails lassen sich Thumbnails zu den einzelnen Slides einbinden. Ein video-thumbnail nimmt ein Attribut \"starttime\" (Startzeit des Thumbnails in Sekunden) und \"img_src\" (Pfad zum Bild) entgegen.\r\n\r\n## Video-Player einbinden\r\nDer Video-Player lässt sich wie jedes HTML-Element einbinden.\r\n````\r\n<video-player>\r\n  <video-stream\r\n    poster=\"{poster-url}\"\r\n    sd_src=\"{video-url}\">\r\n  </video-stream>\r\n  <video-stream\r\n    poster=\"{poster-url}\"\r\n    sd_src=\"{video-url}\"\r\n    hd_src=\"{hd-video-url}\"\r\n    ratio=\"4:3\">\r\n  </video-stream>\r\n</video-player>\r\n````\r\n\r\nEs sind also mehrere verschachtelte HTML-Tags. Jedes Tag steht für eines unser Polymer-Elemente. Wichtig ist, dass die Controlbar nicht eingebunden werden muss. Diese ist automatisch vorhanden.\r\n\r\n## Beispiele\r\nDer Videoplayer kann verschieden konfiguriert werden.\r\n\r\n### Single-Stream\r\n![Single Stream Example](https://owncloud.hpi.de/index.php/apps/files_sharing/ajax/publicpreview.php?x=1440&y=772&a=true&file=%252FWebprogrammierungsingleStream.png&t=fe722e513912aa34bffbc3ef2aea67d4&scalingup=0)\r\n````\r\n<video-player>\r\n  <video-stream\r\n    poster=\"{poster-url}\"\r\n    sd_src=\"{video-url}\" \r\n    ratio=\"16:9\">\r\n  </video-stream>\r\n</video-player>\r\n````\r\n\r\n### Dual-Stream\r\n![Dual Stream Example](https://owncloud.hpi.de/index.php/apps/files_sharing/ajax/publicpreview.php?x=1440&y=772&a=true&file=%252FWebprogrammierungdualStream.png&t=63f75085dbee55dedcb441bbce16ea68&scalingup=0)\r\n````\r\n<video-player>\r\n  <video-stream\r\n    poster=\"{poster-url}\"\r\n    sd_src=\"{video-url}\">\r\n  </video-stream>\r\n  <video-stream\r\n    poster=\"{poster-url}\"\r\n    sd_src=\"{video-url}\"\r\n    hd_src=\"{hd-video-url}\"\r\n    ratio=\"4:3\">\r\n    </video-stream>\r\n</video-player>\r\n````\r\n\r\n### Mit Untertiteln\r\n![Dual Stream With Subtitles Example](https://owncloud.hpi.de/index.php/apps/files_sharing/ajax/publicpreview.php?x=1440&y=772&a=true&file=%252FWebprogrammierungdualStreamWithSubtitles.png&t=9abf7703473b8dcfdbab43b5e1f044b3&scalingup=0)\r\n````\r\n<video-player id=\"player\" showSubtitles>\r\n  <video-stream\r\n    poster=\"{poster-url}\"\r\n    sd_src=\"{video-url}\"\r\n    subtitles=\"{subtitles-url}\">\r\n  </video-stream>\r\n  <video-stream\r\n    poster=\"{poster-url}\"\r\n    sd_src=\"{sd-video-url}\"\r\n    hd_src=\"{hd-video-url}\"\r\n    ratio=\"4:3\">\r\n  </video-stream>\r\n</video-player>\r\n````\r\n\r\n\r\n### Mit Thumbnails\r\nThumnails sind ein weiteres custom Polymer-Element, sie können einfach nach folgendem Muster nach den video-streams eingefügt werden. Die starttime wird in Sekunden angegeben.\r\n![Dual Stream With Thumbnails Example](https://owncloud.hpi.de/index.php/apps/files_sharing/ajax/publicpreview.php?x=1440&y=772&a=true&file=%252FWebprogrammierungdualStreamWithSubtitles.png&t=9abf7703473b8dcfdbab43b5e1f044b3&scalingup=0)\r\n````\r\n<video-player id=\"player\">\r\n  <video-stream\r\n    poster=\"https://i.vimeocdn.com/video/487220623_640.jpg\"\r\n    sd_src=\"https://player.vimeo.com/external/104624360.sd.mp4?s=a7a41026f4c356cc46de876e3e6072af&amp;download=1\">\r\n  </video-stream>\r\n  <video-stream\r\n    poster=\"https://i.vimeocdn.com/video/487308935_960.jpg\"\r\n    sd_src=\"https://player.vimeo.com/external/104693395.sd.mp4?s=06ac8490cbac4ce54ea154fbcc6e930c&amp;download=1\"\r\n    hd_src=\"https://player.vimeo.com/external/104693395.hd.mp4?s=58b93a8179c01c66fb3e33adf5b3e064&amp;download=1\"\r\n    ratio=\"4:3\">\r\n  </video-stream>\r\n  <video-thumbnail img_src=\"thumbnails/125.jpg\" starttime=\"5\"></video-thumbnail>\r\n  <video-thumbnail img_src=\"thumbnails/1850.jpg\" starttime=\"74\"></video-thumbnail>\r\n  <video-thumbnail img_src=\"thumbnails/3425.jpg\" starttime=\"137\"></video-thumbnail>\r\n  <video-thumbnail img_src=\"thumbnails/4300.jpg\" starttime=\"172\"></video-thumbnail>\r\n  <video-thumbnail img_src=\"thumbnails/5100.jpg\" starttime=\"204\"></video-thumbnail>\r\n  <video-thumbnail img_src=\"thumbnails/13275.jpg\" starttime=\"531\"></video-thumbnail>\r\n  <video-thumbnail img_src=\"thumbnails/13625.jpg\" starttime=\"545\"></video-thumbnail>\r\n  <video-thumbnail img_src=\"thumbnails/20075.jpg\" starttime=\"803\"></video-thumbnail>\r\n  <video-thumbnail img_src=\"thumbnails/26925.jpg\" starttime=\"1077\"></video-thumbnail>\r\n</video-player>\r\n````\r\n\r\n###API\r\n\r\n####Attribute\r\nMit diesen Attributen kann das video-player-Element direkt beim Einbinden angepasst werden.\r\n\r\n**autoplay (ohne Wert)**: Lässt das Video sofort starten\r\n\r\n**progress=\"{int sekunden}\"**: Lässt das Video an einer bestimmten Stelle starten. Reflectable (Kann wieder ausgelesen werden, z.B. um die aktuelle Abspielposition festzustellen.)\r\n\r\n**duration=\"{int sekunden}\"**: Optional zur Anzeige der Videodauer, bevor die Videos geladen sind\r\n\r\n**speed=\"{double speed}\"**: Abspielgeschwindigkeit. Reflectable\r\n\r\n**quality=\"{hd|sd}\"**: Initiale Videoqualität\r\n\r\n**volume=\"{int volume [0, 100]}\"**: Lautstärke zwischen 0 und 100. Reflectable\r\n\r\n**showSubtitles (ohneWert)**: Initial Untertitel anzeigen. Reflectable\r\n\r\n## Browserkompatibilität\r\nNur aktuellere Chrome-Versionen, die bereits Webcomponents unterstützen.\r\nTheoretisch auch aktuelle Versionen von Firefox, Opera, IE, dazu wären aber noch eine tiefgehende Beschäftigung mit der genauen Arbeitsweise der Polyfills und entsprechende Anpassungen nötig. Dieser Aufwand hätte den Projektrahmen gesprengt.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}